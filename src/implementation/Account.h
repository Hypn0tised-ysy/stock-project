#pragma once
#include <iostream>
#include <vector>
#include <string>
#include <conio.h>
#include <stdlib.h>
#include <Windows.h>
#include "My_stock.h"
#include "order.h"
#include <Qstring>
// ×¢ï¿½Í´ï¿½ï¿½ë²¿ï¿½ï¿½Îªï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¹ï¿½ï¿½ï¿½Êµï¿½Ö·ï¿½Ê½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Account_groupï¿½ï¿½ï¿½æ´¢ï¿½Ë»ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¿ï¿½ï¿½ï¿½,×¢ï¿½Í²ï¿½ï¿½Ö·Åµï¿½ï¿½ï¿½Account_group

class Account
{
private:
	int id;							 // ï¿½Ë»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	std::string Username;			 // ï¿½Ë»ï¿½ï¿½ï¿½id
	std::string password;			 // ï¿½Ë»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	double money;					 // ï¿½Ë»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	std::vector<My_stock > mystock; // ï¿½æ´¢ï¿½ï¿½Æ±ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½Ô´æ´¢ï¿½ï¿½ï¿½ï¿½ï¿½Í?¿½ï¿½ï¿½ÍµÄ¹ï¿½Æ?
	// std::vector<Account*>acc;//ï¿½æ´¢ï¿½Ë»ï¿½ï¿½ï¿½ï¿½å£¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ãµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î?¿½ï¿½ï¿½Ý´æ´?¿½ï¿½ï¿½Ã·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Accountï¿½ï¿½Ä¶ï¿½ï¿½ï¿½Í?¿½ï¿½ï¿½ï¿½ï¿½Ã¸Ã¶ï¿½ï¿½ï¿½ï¿½accï¿½ï¿½ï¿½æ´¢ï¿½Ë»ï¿½ï¿½ï¿½Ï¢
	friend class Account_group;

public:
	// int enroll(std::string _id,std::string _password);//×¢ï¿½ï¿½
	// void setid(Account *user,bool &reg,std::string s);//ï¿½ï¿½ï¿½ï¿½ï¿½Ëºï¿½
	// void setpassword(Account *user,std::string s);//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	Account() {}
	// bool check(std::string id, std::string pass);//ï¿½ï¿½ï¿½ï¿½Ëºï¿½ï¿½Ç·ï¿½ï¿½ï¿½È?
	bool is_oktobuy(double price); // ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ã¹»ï¿½Ä½ï¿½Ç®ï¿½Ü¹ï¿½È¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ·
	// Account*Getaccount(bool is_ok);//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½Ç·ï¿½×?¿½ï¿½É¹ï¿½ï¿½ï¿½ï¿½É¹ï¿½ï¿½Í·ï¿½ï¿½ï¿½×¢ï¿½ï¿½É¹ï¿½ï¿½ï¿½ï¿½Ë»ï¿½Ö¸ï¿½ï¿?
	std::string get_id(Account *user);									  // ï¿½é¿´ï¿½Òµï¿½ï¿½Ë»ï¿½id
	std::vector<My_stock *> show_my_stock();							  // ï¿½é¿´ï¿½ÒµÄ¹ï¿½Æ±ï¿½ï¿½ï¿½ï¿½ï¿½Ï?
	void upgrade(std::string _sym, int _sum, double price, Order &order); // ï¿½ï¿½ï¿½Â¿ï¿½ï¿½ï¿½ï¿½Ï?//
	// Account* find_user(std::string _id);//ï¿½Òµï¿½Ö¸ï¿½ï¿½ï¿½ï¿½idï¿½ï¿½ï¿½Ã»ï¿½
	void setmoney(double mm);
	Account(int _id); // ï¿½ï¿½ï¿½ìº¯ï¿½ï¿½
    std::string return_username();
    int return_id();
	int add_my_order(int &operatorId, double price, int quantity, const QString &symbol, bool side);//base the order Return orderId

};

// ï¿½ï¿½ï¿½Ú¹ï¿½ï¿½ï¿½Í³ï¿½ï¿½Û¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
// ï¿½ï¿½ï¿½Ó¶ï¿½ï¿½ï¿½ï¿½Äºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½idï¿½ï¿½ï¿½Ú¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Û¸ñ£?ï¿½ï¿½Ä¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä·ï¿½ï¿½ï¿?

int enroll(std::string _id, std::string _password); // ×¢ï¿½ï¿½
int login(std::string _id, std::string _password);	// ï¿½ï¿½Â¼
